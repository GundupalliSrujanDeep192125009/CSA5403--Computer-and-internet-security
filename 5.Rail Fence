class RailFenceCipherHelper {
    int depth;

    // Encoding function
    String encode(String msg, int depth) {
        int len = msg.length();
        char[][] rail = new char[depth][len];

        // Fill the rail fence pattern
        int row = 0, dir = 1;
        for (int i = 0; i < len; i++) {
            rail[row][i] = msg.charAt(i);
            if (row == 0) dir = 1; // Moving downward
            if (row == depth - 1) dir = -1; // Moving upward
            row += dir;
        }

        // Read the encrypted message row-wise
        StringBuilder enc = new StringBuilder();
        for (int i = 0; i < depth; i++) {
            for (int j = 0; j < len; j++) {
                if (rail[i][j] != '\0') {
                    enc.append(rail[i][j]);
                }
            }
        }
        return enc.toString();
    }

    // Decoding function
    String decode(String encMsg, int depth) {
        int len = encMsg.length();
        char[][] rail = new char[depth][len];

        // Mark the rail positions
        int row = 0, dir = 1;
        for (int i = 0; i < len; i++) {
            rail[row][i] = '*';
            if (row == 0) dir = 1;
            if (row == depth - 1) dir = -1;
            row += dir;
        }

        // Fill the marked positions with characters from the encrypted text
        int index = 0;
        for (int i = 0; i < depth; i++) {
            for (int j = 0; j < len; j++) {
                if (rail[i][j] == '*' && index < len) {
                    rail[i][j] = encMsg.charAt(index++);
                }
            }
        }

        // Read the message in a zig-zag order
        StringBuilder dec = new StringBuilder();
        row = 0;
        dir = 1;
        for (int i = 0; i < len; i++) {
            dec.append(rail[row][i]);
            if (row == 0) dir = 1;
            if (row == depth - 1) dir = -1;
            row += dir;
        }

        return dec.toString();
    }
}

public class railfenceCipher {
    public static void main(String[] args) {
        RailFenceCipherHelper rf = new RailFenceCipherHelper();
        String msg = "SIMATS University, Chennai";
        int depth = 2;

        String enc = rf.encode(msg, depth);
        String dec = rf.decode(enc, depth);

        System.out.println("Simulating Rail Fence Cipher\n-------------------------");
        System.out.println("Input Message      : " + msg);
        System.out.println("Encrypted Message  : " + enc);
        System.out.println("Decrypted Message  : " + dec);
    }
}
